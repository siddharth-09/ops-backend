"""
Workflow models for OpsFlow Guardian 2.0
"""

from pydantic import BaseModel, Field
from enum import Enum
from typing import List, Dict, Any, Optional
from datetime import datetime
import uuid


class WorkflowPriority(str, Enum):
    """Workflow priority levels"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"


class WorkflowStatus(str, Enum):
    """Workflow status types"""
    DRAFT = "draft"
    PENDING_APPROVAL = "pending_approval"
    APPROVED = "approved"
    REJECTED = "rejected"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class RiskLevel(str, Enum):
    """Risk assessment levels"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class WorkflowRequest(BaseModel):
    """Workflow request from user"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    description: str
    priority: WorkflowPriority = WorkflowPriority.MEDIUM
    context: Optional[str] = None
    requested_tools: List[str] = Field(default_factory=list)
    deadline: Optional[datetime] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class WorkflowStep(BaseModel):
    """Individual step in a workflow"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    plan_id: str
    name: str
    description: str
    step_order: int
    tool_integrations: List[str] = Field(default_factory=list)
    risk_level: RiskLevel = RiskLevel.LOW
    requires_approval: bool = False
    estimated_duration: int = 5  # minutes
    dependencies: List[str] = Field(default_factory=list)  # step IDs this depends on
    status: str = "pending"
    rollback_procedure: Optional[str] = None
    success_criteria: Optional[str] = None
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class WorkflowPlan(BaseModel):
    """Detailed workflow plan generated by Planner Agent"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    request_id: str
    name: str
    description: str
    created_by: str
    status: WorkflowStatus = WorkflowStatus.DRAFT
    risk_level: RiskLevel = RiskLevel.LOW
    estimated_duration: int = 0  # minutes
    steps: List[WorkflowStep] = Field(default_factory=list)
    approval_required: bool = True
    approved_by: Optional[str] = None
    approved_at: Optional[datetime] = None
    rejection_reason: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
    
    def calculate_total_duration(self) -> int:
        """Calculate total estimated duration"""
        return sum(step.estimated_duration for step in self.steps)
    
    def get_approval_required_steps(self) -> List[WorkflowStep]:
        """Get steps that require approval"""
        return [step for step in self.steps if step.requires_approval]
    
    def get_high_risk_steps(self) -> List[WorkflowStep]:
        """Get high risk steps"""
        return [step for step in self.steps if step.risk_level in [RiskLevel.HIGH, RiskLevel.CRITICAL]]


class WorkflowExecution(BaseModel):
    """Workflow execution tracking"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    plan_id: str
    status: WorkflowStatus = WorkflowStatus.RUNNING
    executed_by: str  # agent ID
    started_at: datetime = Field(default_factory=datetime.utcnow)
    completed_at: Optional[datetime] = None
    current_step_index: int = 0
    step_results: Dict[str, Any] = Field(default_factory=dict)  # step_id -> result
    error_message: Optional[str] = None
    rollback_performed: bool = False
    total_duration: Optional[int] = None  # actual duration in minutes
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
    
    def get_progress_percentage(self, total_steps: int) -> float:
        """Calculate execution progress percentage"""
        if total_steps == 0:
            return 0.0
        return (len(self.step_results) / total_steps) * 100.0


class WorkflowApproval(BaseModel):
    """Workflow approval request"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    plan_id: str
    requested_by: str
    approver_id: Optional[str] = None
    status: str = "pending"  # pending, approved, rejected
    approved_at: Optional[datetime] = None
    rejection_reason: Optional[str] = None
    approval_notes: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    expires_at: Optional[datetime] = None
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class WorkflowTemplate(BaseModel):
    """Reusable workflow template"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    description: str
    category: str
    template_steps: List[Dict[str, Any]] = Field(default_factory=list)
    required_tools: List[str] = Field(default_factory=list)
    estimated_duration: int = 0
    risk_level: RiskLevel = RiskLevel.LOW
    created_by: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    usage_count: int = 0
    is_active: bool = True
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class WorkflowMetrics(BaseModel):
    """Workflow performance metrics"""
    workflow_id: str
    execution_time: int  # minutes
    success_rate: float
    error_rate: float
    resource_usage: Dict[str, Any] = Field(default_factory=dict)
    cost_estimate: Optional[float] = None
    user_satisfaction: Optional[float] = None
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
